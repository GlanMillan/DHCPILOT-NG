version: '3.8'

# 定义通用的健康检查配置
x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3

services:
  # Nginx反向代理
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "0.0.0.0:${NGINX_PORT}:80"
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d
      - ./nginx/logs:/var/log/nginx
    depends_on:
      web:
        condition: service_healthy
      kea:
        condition: service_healthy
    networks:
      - dhcp-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      <<: *healthcheck-defaults

  # Web应用服务
  web:
    build:
      context: ./backend
      dockerfile: Dockerfile
    expose:
      - "${WEB_PORT}"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DB}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      - REFRESH_TOKEN_EXPIRE_DAYS=${REFRESH_TOKEN_EXPIRE_DAYS}
      - API_KEY_EXPIRE_DAYS=${API_KEY_EXPIRE_DAYS}
      - KEA_CTRL_AGENT_URL=${KEA_CTRL_AGENT_URL}
      - BIND9_RNDC_KEY=${BIND9_RNDC_KEY}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dhcp-network
      - internal
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${WEB_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: on-failure

  # PostgreSQL数据库
  db:
    image: postgres:16-alpine
    expose:
      - "${POSTGRES_PORT}"
    environment:
      - POSTGRES_USER=dhcp
      - POSTGRES_PASSWORD=dhcp_password
      - POSTGRES_DB=dhcp_admin
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dhcp"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kea DHCP服务
  kea:
    build:
      context: ./kea
      dockerfile: Dockerfile
    ports:
      - "${DHCP_PORT}:67/udp"
    expose:
      - "${KEA_CTRL_PORT}"
    volumes:
      - ./kea/conf:/etc/kea
      - ./kea/logs:/var/log/kea
    environment:
      - KEA_DB_HOST=db
      - KEA_DB_PORT=${POSTGRES_PORT}
      - KEA_DB_NAME=${POSTGRES_DB}
      - KEA_DB_USER=${POSTGRES_USER}
      - KEA_DB_PASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - dhcp-network
      - internal
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${KEA_CTRL_PORT}/status"]
      <<: *healthcheck-defaults
    restart: on-failure

  # BIND9服务
  bind9:
    build:
      context: ./bind9
      dockerfile: Dockerfile
    ports:
      - "53:53/udp"
      - "53:53/tcp"
    volumes:
      - ./bind9/conf:/etc/bind
      - ./bind9/zones:/var/cache/bind
      - ./bind9/logs:/var/log/bind
      - bind9_keys:/etc/bind/keys
    networks:
      - dhcp-network
    healthcheck:
      test: ["CMD", "dig", "@localhost", "localhost"]
      <<: *healthcheck-defaults
    restart: on-failure

  redis:
    image: redis:7-alpine
    expose:
      - "${REDIS_PORT}"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      - internal
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      <<: *healthcheck-defaults
    deploy:
      resources:
        limits:
          memory: 256M

networks:
  dhcp-network:
    name: ${DOCKER_NETWORK_EXTERNAL}
    driver: bridge
  internal:
    name: ${DOCKER_NETWORK_INTERNAL}
    driver: bridge
    internal: true

volumes:
  postgres_data:
  redis_data:
  bind9_keys: 